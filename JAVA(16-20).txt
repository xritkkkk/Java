*SLIP 16*
Q1=
public class MyNumber {
    private int number;
    public MyNumber(int number) {
        this.number = number;
    }
    public boolean isEven() {
        return number % 2 == 0;
    }
    public static void main(String[] args) {
        if (args.length > 0) {
            try {
                int inputNumber = Integer.parseInt(args[0]);
                             MyNumber myNumber = new MyNumber(inputNumber);
                             if (myNumber.isEven()) {
                    System.out.println(inputNumber + " is an even number.");
                } else {
                    System.out.println(inputNumber + " is an odd number.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Please provide a valid integer.");
            }
        } else {
            System.out.println("Please provide a number as a command line argument.");
        }
    }
}
Q2=(1)
// Superclass Employee
class Employee {
    protected String name;
    protected double salary;

    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }
    public void displayDetails() {
        System.out.println("Employee Name: " + name);
        System.out.println("Employee Salary: " + salary);
    }
}
class Programmer extends Employee {
    private String proglanguage;
    public Programmer(String name, double salary, String proglanguage) {
        super(name, salary); // Call to the superclass constructor
        this.proglanguage = proglanguage;
    }
    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Programming Language: " + proglanguage);
    }
}
public class Main {
    public static void main(String[] args) {
           Programmer programmer = new Programmer("Alice", 75000, "Java");
        programmer.displayDetails();
    }
}
*SLIP 17*
Q1=
public class MyNumber {
    private int number;
    public MyNumber(int number) {
        this.number = number;
    }
    public boolean isOdd() {
        return number % 2 != 0;
    }
    public static void main(String[] args) {
        if (args.length > 0) {
            try {
                int inputNumber = Integer.parseInt(args[0]);
                MyNumber myNumber = new MyNumber(inputNumber);
                if (myNumber.isOdd()) {
                    System.out.println(inputNumber + " is an odd number.");
                } else {
                    System.out.println(inputNumber + " is an even number.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Please provide a valid integer.");
            }
        } else {
            System.out.println("Please provide a number as a command line argument.");
        }
    }
}
Q2=(1)
class Student {
    // Attributes
    private int rollno;
    private String name; 
    private static int objectCount = 0;
    // Default constructor
    public Student() {
        this.rollno = 0;
        this.name = "Unknown";
        objectCount++; // Increment count on object creation
        displayCount();
    }
    public Student(int rollno, String name) {
        this.rollno = rollno;
        this.name = name;
        objectCount++; // Increment count on object creation
        displayCount();
    }
    private void displayCount() {
        System.out.println("Total Student objects created: " + objectCount);
    }
    public void displayStudentInfo() {
        System.out.println("Roll No: " + rollno + ", Name: " + name);
    }
    public static void main(String[] args) {
        Student student1 = new Student(1, "Alice");
        student1.displayStudentInfo();
        Student student2 = new Student(2, "Bob");
        student2.displayStudentInfo();
        Student student3 = new Student();
        student3.displayStudentInfo();
    }
}
*SLIP 18*
Q1=
public class Factors {
    public static void printFactors(int number) {
        System.out.println("Factors of " + number + ":");
        for (int i = 1; i <= number; i++) {
            if (number % i == 0) {
                System.out.print(i + " ");
            }
        }
        System.out.println(); // New line for better formatting
    }
    public static void main(String[] args) {
        if (args.length > 0) {
            try {
               int inputNumber = Integer.parseInt(args[0]);
                if (inputNumber <= 0) {
                    System.out.println("Please enter a positive integer.");
                } else {
                                    printFactors(inputNumber);
                }
            } catch (NumberFormatException e) {
                System.out.println("Please provide a valid integer.");
            }
        } else {
            System.out.println("Please provide a number as a command line argument.");
        }
    }
}
Q2=(1)
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
public class ReadFileToUpper {
    public static void main(String[] args) {
        // Specify the file name
        String fileName = "abc.txt";
             try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            System.out.println("Contents of " + fileName + " in uppercase:");
            while ((line = br.readLine()) != null) {
                 System.out.println(line.toUpperCase());
            }
        } catch (IOException e) {
             System.out.println("An error occurred while reading the file: " + e.getMessage());
        }
    }
}




*SLIP 19*
Q1=
import java.util.Scanner;
public class MaxNumberInArray {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
               System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();      
        // Create an array to hold the numbers
        int[] numbers = new int[n];
        System.out.println("Enter " + n + " different numbers:");
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        int maxNumber = findMax(numbers);
        System.out.println("The maximum number is: " + maxNumber);     
        scanner.close();
    }
    private static int findMax(int[] array) {
        int max = array[0]; // Assume the first element is the maximum
        for (int i = 1; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i]; // Update max if the current element is larger
            }
        }
        return max; // Return the maximum value found
    }
}
Q2=(1)
import java.util.Scanner;
abstract class Order {
    protected int id;
    protected String description;
    public abstract void accept();
    public abstract void display();
}
class PurchaseOrder extends Order {
    private String customerName;
    @Override
    public void accept() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Order ID: ");
        id = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Order Description: ");
        description = scanner.nextLine();
        System.out.print("Enter Customer Name: ");
        customerName = scanner.nextLine();
    }
    @Override
    public void display() {
        System.out.println("Order ID: " + id);
        System.out.println("Description: " + description);
        System.out.println("Customer Name: " + customerName);
        System.out.println("----------------------------");
    }
}
public class Main {
    public static void main(String[] args) {
        PurchaseOrder[] orders = new PurchaseOrder[3];
        for (int i = 0; i < orders.length; i++) {
            System.out.println("Entering details for Purchase Order " + (i + 1) + ":");
            orders[i] = new PurchaseOrder();
            orders[i].accept();
            System.out.println();
        }
        System.out.println("Details of Purchase Orders:");
        for (PurchaseOrder order : orders) {
            order.display();
        } } }
*SLIP 20*
Q1=
import java.util.Arrays;
public class SortNumbers {
    public static void main(String[] args) {
           if (args.length != 3) {
            System.out.println("Please provide exactly 3 numbers as command line arguments.");
            return;
        }
//CMD  line arguments to integers
        int[] numbers = new int[3];
        try {
            for (int i = 0; i < 3; i++) {
                numbers[i] = Integer.parseInt(args[i]);
            }
        } catch (NumberFormatException e) {
            System.out.println("Please ensure all inputs are valid integers.");
            return;
        }
        // Sort the numbers
        Arrays.sort(numbers);
        // Display the sorted numbers
        System.out.println("Sorted numbers:");
        for (int number : numbers) {
            System.out.println(number);
        }
    }
}
Q2=(1)
class Employee {
    private int id;
    private String name;
    private String deptName;
    private double salary;
    
    private static int objectCount = 0;
    public Employee() {
        // Default values
        this.id = 0;
        this.name = "Unknown";
        this.deptName = "Unknown";
        this.salary = 0.0;
        objectCount++;
    }
    // Parameterized constructor
    public Employee(int id, String name, String deptName, double salary) {
        this.id = id;
        this.name = name;
        this.deptName = deptName;
        this.salary = salary;
        objectCount++;
        display(); // Display object details after creation
    }
    public void display() {
        System.out.println("Employee ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Department Name: " + deptName);
        System.out.println("Salary: " + salary);
        System.out.println("-----------------------------");
        System.out.println("Total Employee Count: " + objectCount);
    }
    public static void main(String[] args) {
        // Creating Employee objects using the parameterized constructor
        Employee emp1 = new Employee(101, "Alice", "HR", 50000);
        Employee emp2 = new Employee(102, "Bob", "IT", 60000);
        Employee emp3 = new Employee(103, "Charlie", "Finance", 55000);      
        Employee emp4 = new Employee(); // This will use default values
        emp1.display();
        emp2.display();
        emp3.display();
        emp4.display(); // Displays default values
    }
}
